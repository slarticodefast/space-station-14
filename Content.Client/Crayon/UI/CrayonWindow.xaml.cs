using Content.Client.Stylesheets;
using Content.Shared.Crayon;
using Content.Shared.Decals;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Crayon.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CrayonWindow : DefaultWindow
    {
        public CrayonBoundUserInterface Owner { get; }

        private Dictionary<string, Texture>? _decals;
        private string? _selected;
        private Color _color;
        private float _angle;

        public CrayonWindow(CrayonBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);

            Owner = owner;

            AngleLineEdit.OnTextChanged += text =>
            {
                if (!float.TryParse((string?)text.Text, out var angle))
                    angle = 0f;
                _angle = ReduceAngle(angle);
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };
            SearchLineEdit.OnTextChanged += _ => RefreshList();
            ColorSelector.OnColorChanged += SelectColor;
            AngleMinus90.OnPressed += _ =>
            {
                _angle = ReduceAngle(_angle - 90);
                AngleLineEdit.Text = _angle.ToString("G");
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };
            AngleMinus45.OnPressed += _ =>
            {
                _angle = ReduceAngle(_angle - 45);
                AngleLineEdit.Text = _angle.ToString("G");
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };
            Angle0.OnPressed += _ =>
            {
                _angle = 0f;
                AngleLineEdit.Text = _angle.ToString("G");
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };
            AnglePlus45.OnPressed += _ =>
            {
                _angle = ReduceAngle(_angle + 45);
                AngleLineEdit.Text = _angle.ToString("G");
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };
            AnglePlus90.OnPressed += _ =>
            {
                _angle = ReduceAngle(_angle + 90);
                AngleLineEdit.Text = _angle.ToString("G");
                Owner.OnAngleChanged(Angle.FromDegrees(_angle));
            };

        }

        private float ReduceAngle(float angle)
        {
            angle = angle % 360;
            if (angle < 0)
                angle += 360;
            return angle;
        }

        private void SelectColor(Color color)
        {
            _color = color;

            Owner.SelectColor(color);

            RefreshList();
        }

        private void RefreshList()
        {
            // Clear
            Grid.RemoveAllChildren();
            if (_decals == null) return;

            var filter = SearchLineEdit.Text;
            foreach (var (decal, tex) in _decals)
            {
                if (!decal.Contains(filter))
                    continue;

                var button = new TextureButton()
                {
                    TextureNormal = tex,
                    Name = decal,
                    ToolTip = decal,
                    Modulate = _color,
                };
                button.OnPressed += ButtonOnPressed;
                if (_selected == decal)
                {
                    var panelContainer = new PanelContainer()
                    {
                        PanelOverride = new StyleBoxFlat()
                        {
                            BackgroundColor = StyleNano.ButtonColorDefault,
                        },
                        Children =
                        {
                            button,
                        },
                    };
                    Grid.AddChild(panelContainer);
                }
                else
                {
                    Grid.AddChild(button);
                }
            }
        }

        private void ButtonOnPressed(ButtonEventArgs obj)
        {
            if (obj.Button.Name == null) return;

            Owner.Select(obj.Button.Name);
            _selected = obj.Button.Name;
            RefreshList();
        }

        public void UpdateState(CrayonBoundUserInterfaceState state)
        {
            _selected = state.Selected;
            ColorSelector.Visible = state.SelectableColor;
            _color = state.Color;
            AngleLineEdit.Text = state.Angle.Degrees.ToString("G");

            if (ColorSelector.Visible)
            {
                ColorSelector.Color = state.Color;
            }

            RefreshList();
        }

        public void Populate(IEnumerable<DecalPrototype> prototypes)
        {
            _decals = new Dictionary<string, Texture>();
            foreach (var decalPrototype in prototypes)
            {
                _decals.Add(decalPrototype.ID, decalPrototype.Sprite.Frame0());
            }

            RefreshList();
        }
    }
}
